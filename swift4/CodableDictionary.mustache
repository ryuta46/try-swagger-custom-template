// APIHelper.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

public enum CodableDictionary: Codable {
    case integer(Int64)
    case double(Double)
    case string(String)
    case boolean(Bool)
    case array([CodableDictionary])
    case object([String: CodableDictionary])
    
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let bool = try? container.decode(Bool.self) {
            self = .boolean(bool)
        } else if let string = try? container.decode(String.self) {
            self = .string(string)
        } else if let int = try? container.decode(Int64.self) {
            self = .integer(int)
        } else if let number = try? container.decode(Double.self) {
            self = .double(number)
        } else if let array = try? container.decode([CodableDictionary].self) {
            self = .array(array)
        } else if let dict = try? container.decode([String: CodableDictionary].self) {
            self = .object(dict)
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not decode data into a JSON-compatible value")
        }
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .integer(let int):
            try container.encode(int)
        case .double(let number):
            try container.encode(number)
        case .string(let string):
            try container.encode(string)
        case .boolean(let bool):
            try container.encode(bool)
        case .array(let jsonArray):
            try container.encode(jsonArray)
        case .object(let jsonObject):
            try container.encode(jsonObject)
        }
    }
}
